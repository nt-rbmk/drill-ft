name: Assign Reviewers

on:
#  push:

  schedule:
    - cron: '*/20 * * * *'

jobs:
  assign_reviewers:
    runs-on: ubuntu-latest

    steps:
      - name: Assign reviewers
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          WORKFLOW_NAME: "Artifacts"
          # the name of the artifact whose content comment published by PR. Must have a single markdown file inside.
          MSG_ARTIFACT_NAME: "pr_message"
          # How far back to look for finished runs, in minutes.
          # Set to 10-20 minutes higher than cron's job frequency set above.
          IGNORE_RUNS_OLDER_THAN: 30
          # How far back to look for updated pull requests, in minutes.
          # Should be bigger than IGNORE_RUNS_OLDER_THAN by the maximum time a pull request jobs may take
          IGNORE_PRS_OLDER_THAN: 80
        run: |
        
          export GITHUB_API="https://api.github.com/repos/$GITHUB_REPOSITORY"

          # A useful wrapper around CURL
          crl() {
            curl --silent --show-error --location --retry 1 "${@:2}" \
              -H "Accept: application/vnd.github.antiope-preview+json, application/vnd.github.v3+json" \
             "$1"
          }

          auth_crl() {
            crl "$1" -H "authorization: Bearer $GITHUB_TOKEN" "${@:2}"
          }

          PULL_REQUESTS_RAW="$( crl "$GITHUB_API/pulls?sort=updated&direction=desc" )"
          if ! PULL_REQUESTS="$(jq --arg IGNORE_PRS_OLDER_THAN "$IGNORE_PRS_OLDER_THAN" '
              map(
                  # Only select unlocked pull requests updated within last $IGNORE_PRS_OLDER_THAN minutes
                  select(.locked==false
                         and (now - (.updated_at|fromdate)) / 60 < ($IGNORE_PRS_OLDER_THAN | tonumber))
                  # Prepare for "from_entries" by creating a key/value object
                  # The key is a combination of repository name, branch name, and latest SHA
                  | { key: (.head.repo.full_name + "/" + .head.ref + "/" + .head.sha), value: .number }
              )
              | from_entries
            ' <( echo "$PULL_REQUESTS_RAW" ) )"; then

              echo "Error parsing pull requests"
              echo "$PULL_REQUESTS_RAW"
              exit 1
          fi

          # Count how many pull requests we should process, and exit early if there are none
          PR_COUNT="$(jq 'length' <( echo "$PULL_REQUESTS" ) )"
          if [ "$PR_COUNT" -eq 0 ]; then
            echo "There are no pull requests updated in the last $IGNORE_PRS_OLDER_THAN minutes. Exiting."
            exit
          else
            echo "$PR_COUNT pull requests have been updated in the last $IGNORE_PRS_OLDER_THAN minutes"
            echo "$PULL_REQUESTS" | jq -r 'keys|.[]|" * " + .'
          fi

          WORKFLOW_ID="$(crl "$GITHUB_API/actions/workflows" \
              | jq --arg WORKFLOW_NAME "$WORKFLOW_NAME" '
              .workflows[] | select(.name == $WORKFLOW_NAME) | .id
              ')"
          if [ -z "$WORKFLOW_ID" ]; then
            echo "Unable to find workflow '$WORKFLOW_NAME' in $GITHUB_REPOSITORY"
            exit 1
          else
            echo "Resolved workflow '$WORKFLOW_NAME' to ID $WORKFLOW_ID"
          fi

          WORKFLOW_PR_RUNS="$(crl "$GITHUB_API/actions/workflows/${WORKFLOW_ID}/runs?event=pull_request")"

          PR_JOB_MAP="$(jq --arg IGNORE_RUNS_OLDER_THAN "$IGNORE_RUNS_OLDER_THAN" '
              # second input is the pull request map - use it to lookup PR numbers
              input as $PULL_REQUESTS
              | .workflow_runs
              | map(
                  # Create a new object with the relevant values
                  {
                      id,
                      updated_at,
                      # create lookup key based on source repository + branch + SHA
                      key: (.head_repository.full_name + "/" + .head_branch + "/" + .head_sha),
                      # was this a successful run?
                      # do not include  .conclusion=="success"  because errors could also post messages
                      success: (.status=="completed")
                  }
                  # lookup PR number from $PULL_REQUESTS using the above key
                  | . += { pr_number: $PULL_REQUESTS[.key] }
                  # Remove runs that were not in the list of the PRs
                  | select(.pr_number)
              )
              # Keep just the most recent run per pull request
              | group_by(.pr_number)
              | map(
                  sort_by(.updated_at)
                  | last
                  # If the most recent run did not succeed, or if the run is too old, ignore it
                  | select(.success and (now - (.updated_at|fromdate)) / 60 < ($IGNORE_RUNS_OLDER_THAN | tonumber))
                  # Keep just the pull request number mapping to run ID
                  | { pr_number, id, key }
              )
              ' <( echo "$WORKFLOW_PR_RUNS" ) <( echo "$PULL_REQUESTS" ) )"


          # Count how many jobs we should process, and exit early if there are none
          JOBS_COUNT="$(jq 'length' <( echo "$PR_JOB_MAP" ) )"
          if [ "$JOBS_COUNT" -eq 0 ]; then
            echo "There are no recent workflow job runs in the last $IGNORE_RUNS_OLDER_THAN minutes. Exiting."
            exit
          else
            echo "$JOBS_COUNT '$WORKFLOW_NAME' jobs have been updated in the last $IGNORE_RUNS_OLDER_THAN minutes"
            echo "$PR_JOB_MAP" | jq -r '.[] | " * PR #\(.pr_number) Job #\(.id) -- \(.key) "'
          fi

          #
          # Iterate over the found pairs of PR number + run ID, and update them all
          #
          echo "$PR_JOB_MAP" | jq -r '.[] | [ .pr_number, .id, .key ] | @sh' | \
          while read -r PR_NUMBER RUN_ID RUN_KEY; do

            echo "Processing '$WORKFLOW_NAME' run #$RUN_ID for pull request #$PR_NUMBER $RUN_KEY..."
            ARTIFACTS="$(crl "$GITHUB_API/actions/runs/$RUN_ID/artifacts")"

            # Find the artifact download URL for the artifact with the expected name
            ARTIFACT_URL="$(jq -r --arg MSG_ARTIFACT_NAME "$MSG_ARTIFACT_NAME" '
                .artifacts
                | map(select(.name == $MSG_ARTIFACT_NAME and .expired == false))
                | first
                | .archive_download_url
                | select(.!=null)
                ' <( echo "$ARTIFACTS" ) )"

            if [ -z "$ARTIFACT_URL" ]; then
              echo "Unable to find an artifact named '$MSG_ARTIFACT_NAME' in workflow $RUN_ID (PR #$PR_NUMBER), skipping..."
              continue
            fi

            echo "Downloading artifact $ARTIFACT_URL (assuming single text file per artifact)..."
            if ! MESSAGE="$(auth_crl "$ARTIFACT_URL" | gunzip)"; then
              echo "Unable to download or parse message from artifact '$MSG_ARTIFACT_NAME' in workflow $RUN_ID (PR #$PR_NUMBER), skipping..."
              continue
            fi
            if [ -z "$MESSAGE" ]; then
              echo "Empty message in artifact '$MSG_ARTIFACT_NAME' in workflow $RUN_ID (PR #$PR_NUMBER), skipping..."
              continue
            fi
            
            PR_NUM=$(echo $MESSAGE | tr " " "\n" | grep -Eo GITHUB_REF_NAME.*[0-9] | awk -F= '{ print $2 }')
            PR_ACTOR=$(echo $MESSAGE | tr " " "\n" | grep GITHUB_ACTOR | awk -F= '{ print $2 }')
            
            # Probably append reviewers to a file
            reviewers=("ntampakas" "AronisAt79" "nt-rbmk")
            assigned_reviewers=$(crl https://api.github.com/repos/ntampakas/drill-ft/pulls/$PR_NUM/requested_reviewers | jq -r '.users[].login')
            
            # Find if a reviewer is already assigned 
            if [ ! -z "$assigned_reviewers" ]; then
                for assigned_reviewer in $assigned_reviewers; do
                    printf "%s\n" ${reviewers[@]} | grep -o $assigned_reviewer >/dev/null 2>&1
                    if [ $? -eq 0 ]; then
                        echo "Reviewer found. Exiting."
                        exit 0
                    fi
                done
            fi

            # Randomize reviewer
            while true; do
                random=$$$(date +%s)
                selected_reviewer=${reviewers[$random % ${#reviewers[@]}]}
                
                if [ $selected_reviewer != $PR_ACTOR ]; then
                    break
                fi
                
                sleep 2
            done

            # Assign reviewer
            auth_crl https://api.github.com/repos/$GITHUB_REPOSITORY/pulls/$PR_NUM/requested_reviewers -d '{"reviewers":['\"${selected_reviewer}\"']}' -X POST

          done
